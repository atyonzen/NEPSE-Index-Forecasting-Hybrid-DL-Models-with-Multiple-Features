{"trial_id": "0000", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "activation", "default": "relu", "conditions": [], "values": ["relu", "tanh", "sigmoid", "linear", "swish"], "ordered": false}}, {"class_name": "Float", "config": {"name": "learning_rate", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Int", "config": {"name": "num_layers", "default": 1, "conditions": [], "min_value": 1, "max_value": 5, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "SGD", "conditions": [], "values": ["SGD", "RMSprop", "Adam", "Adadelta", "Adagrad", "Adamax", "Nadam"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "loss", "default": "mean_squared_error", "conditions": [], "values": ["mean_squared_error", "mean_absolute_error", "mean_absolute_percentage_error"], "ordered": false}}, {"class_name": "Int", "config": {"name": "units_0", "default": null, "conditions": [], "min_value": 1, "max_value": 200, "step": 8, "sampling": "linear"}}, {"class_name": "Boolean", "config": {"name": "dropout", "default": false, "conditions": []}}, {"class_name": "Int", "config": {"name": "units", "default": null, "conditions": [], "min_value": 1, "max_value": 200, "step": 8, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_0", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.6, "step": null, "sampling": "log"}}, {"class_name": "Int", "config": {"name": "units_1", "default": null, "conditions": [], "min_value": 1, "max_value": 200, "step": 8, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_1", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.6, "step": null, "sampling": "log"}}, {"class_name": "Int", "config": {"name": "units_2", "default": null, "conditions": [], "min_value": 1, "max_value": 200, "step": 8, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout_2", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.6, "step": null, "sampling": "log"}}, {"class_name": "Choice", "config": {"name": "batch_size", "default": 8, "conditions": [], "values": [8, 16, 24, 32, 40, 48, 56], "ordered": true}}], "values": {"activation": "linear", "learning_rate": 0.00011942731780421024, "num_layers": 3, "optimizer": "RMSprop", "loss": "mean_absolute_percentage_error", "units_0": 65, "dropout": true, "units": 9, "tuner/epochs": 1, "tuner/initial_epoch": 0, "tuner/bracket": 3, "tuner/round": 0, "dropout_0": 0.0001, "units_1": 1, "dropout_1": 0.0001, "units_2": 1, "dropout_2": 0.0001, "batch_size": 8}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"D:\\Data Science with Python\\Next Day's NEPSE Closing Index Forecasting Using Multiple Features\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"D:\\Data Science with Python\\Next Day's NEPSE Closing Index Forecasting Using Multiple Features\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"d:\\Data Science with Python\\Next Day's NEPSE Closing Index Forecasting Using Multiple Features\\model_builder\\model_builder.py\", line 73, in run_trial\n    history = model.fit(\n              ^^^^^^^^^^\n  File \"D:\\Data Science with Python\\Next Day's NEPSE Closing Index Forecasting Using Multiple Features\\.venv\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"D:\\Data Science with Python\\Next Day's NEPSE Closing Index Forecasting Using Multiple Features\\.venv\\Lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py\", line 108, in convert_to_eager_tensor\n    return ops.EagerTensor(value, ctx.device_name, dtype)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: Failed to convert a NumPy array to a Tensor (Unsupported object type float).\n"}